@{
    ViewBag.Title = "Application Signatures";
}
<div class="container">
    <div class="page-header-fixed-top container inner-container">
        <div class="toolbar">
            <div>
                <div class="input-group hidden-print">
                    <span class="input-group-addon">Search by Application Name</span>
                    <input id="filter" type="text" class="form-control" data-bind="value: Filter, valueUpdate: 'afterkeydown'" placeholder="Type here...">
                </div>
            </div>
            <div>
                <div class="dropdown keep-open">
                    <button class="btn btn-default dropdown-toggle" data-toggle="dropdown">Category <span class="caret"></span></button>
                    <ul class="dropdown-menu">
                        <!-- ko if: VisibleCategories().length < AllCategories.length -->
                        <li data-bind="click: SelectAllCategories">
                            <span class="fa fa-fw fa-hand-pointer-o"></span>
                            <span>Select All</span>
                        </li>
                        <!-- /ko -->
                        <!-- ko if: VisibleCategories().length > 0 -->
                        <li data-bind="click: UnselectAllCategories">
                            <span class="fa fa-fw fa-hand-pointer-o"></span>
                            <span>Unselect All</span>
                        </li>
                        <!-- /ko -->
                        <li role="separator" class="divider"></li>
                        <!-- ko foreach: AllCategories -->
                        <li data-bind="click: $root.ToggleCategory">
                            <!-- ko if: $root.IsCategoryVisible($data) -->
                            <span class="fa fa-fw fa-check-square-o"></span>
                            <!-- /ko -->
                            <!-- ko ifnot: $root.IsCategoryVisible($data) -->
                            <span class="fa fa-fw fa-square-o"></span>
                            <!-- /ko -->
                            <span data-bind="text: $data"></span>
                        </li>
                        <!-- /ko -->
                    </ul>
                </div>
            </div>
            <div>
                <div class="dropdown keep-open">
                    <button class="btn btn-default dropdown-toggle" data-toggle="dropdown">Technology <span class="caret"></span></button>
                    <ul class="dropdown-menu">
                        <!-- ko if: VisibleTechnologies().length < AllTechnologies.length -->
                        <li data-bind="click: SelectAllTechnologies">
                            <span class="fa fa-fw fa-hand-pointer-o"></span>
                            <span>Select All</span>
                        </li>
                        <!-- /ko -->
                        <!-- ko if: VisibleTechnologies().length > 0 -->
                        <li data-bind="click: UnselectAllTechnologies">
                            <span class="fa fa-fw fa-hand-pointer-o"></span>
                            <span>Unselect All</span>
                        </li>
                        <!-- /ko -->
                        <li role="separator" class="divider"></li>
                        <!-- ko foreach: AllTechnologies -->
                        <li data-bind="click: $root.ToggleTechnology">
                            <!-- ko if: $root.IsTechnologyVisible($data) -->
                            <span class="fa fa-fw fa-check-square-o"></span>
                            <!-- /ko -->
                            <!-- ko ifnot: $root.IsTechnologyVisible($data) -->
                            <span class="fa fa-fw fa-square-o"></span>
                            <!-- /ko -->
                            <span data-bind="text: $data"></span>
                        </li>
                        <!-- /ko -->
                    </ul>
                </div>
            </div>
            <div>
                <div class="dropdown keep-open">
                    <button class="btn btn-default dropdown-toggle" data-toggle="dropdown">Popularity <span class="caret"></span></button>
                    <ul class="dropdown-menu">
                        <!-- ko if: VisiblePopularities().length < AllPopularities.length -->
                        <li data-bind="click: SelectAllPopularities">
                            <span class="fa fa-fw fa-hand-pointer-o"></span>
                            <span>Select All</span>
                        </li>
                        <!-- /ko -->
                        <!-- ko if: VisiblePopularities().length > 0 -->
                        <li data-bind="click: UnselectAllPopularities">
                            <span class="fa fa-fw fa-hand-pointer-o"></span>
                            <span>Unselect All</span>
                        </li>
                        <!-- /ko -->
                        <li role="separator" class="divider"></li>
                        <!-- ko foreach: AllPopularities -->
                        <li data-bind="click: $root.TogglePopularity">
                            <!-- ko if: $root.IsPopularityVisible($data) -->
                            <span class="fa fa-fw fa-check-square-o"></span>
                            <!-- /ko -->
                            <!-- ko ifnot: $root.IsPopularityVisible($data) -->
                            <span class="fa fa-fw fa-square-o"></span>
                            <!-- /ko -->
                            <span class="glyphicon glyphicon-star" style="color: gold"></span>
                            <!-- ko if: $data >= 2 -->
                            <span class="glyphicon glyphicon-star" style="color: gold"></span>
                            <!-- /ko-->
                            <!-- ko if: $data >= 3 -->
                            <span class="glyphicon glyphicon-star" style="color: gold"></span>
                            <!-- /ko-->
                            <!-- ko if: $data >= 4 -->
                            <span class="glyphicon glyphicon-star" style="color: gold"></span>
                            <!-- /ko-->
                            <!-- ko if: $data >= 5 -->
                            <span class="glyphicon glyphicon-star" style="color: gold"></span>
                            <!-- /ko-->
                            <!-- ko if: $data <= 4 -->
                            <span class="glyphicon glyphicon-star-empty"></span>
                            <!-- /ko-->
                            <!-- ko if: $data <= 3 -->
                            <span class="glyphicon glyphicon-star-empty"></span>
                            <!-- /ko-->
                            <!-- ko if: $data <= 2 -->
                            <span class="glyphicon glyphicon-star-empty"></span>
                            <!-- /ko-->
                            <!-- ko if: $data <= 1 -->
                            <span class="glyphicon glyphicon-star-empty"></span>
                            <!-- /ko-->
                        </li>
                        <!-- /ko -->
                    </ul>
                </div>
            </div>
            <div>
                <div class="dropdown keep-open">
                    <button class="btn btn-default dropdown-toggle" data-toggle="dropdown">Risk <span class="caret"></span></button>
                    <ul class="dropdown-menu">
                        <!-- ko if: VisibleRisks().length < AllRisks.length -->
                        <li data-bind="click: SelectAllRisks">
                            <span class="fa fa-fw fa-hand-pointer-o"></span>
                            <span>Select All</span>
                        </li>
                        <!-- /ko -->
                        <!-- ko if: VisibleRisks().length > 0 -->
                        <li data-bind="click: UnselectAllRisks">
                            <span class="fa fa-fw fa-hand-pointer-o"></span>
                            <span>Unselect All</span>
                        </li>
                        <!-- /ko -->
                        <li role="separator" class="divider"></li>
                        <!-- ko foreach: AllRisks -->
                        <li data-bind="click: $root.ToggleRisk">
                            <!-- ko if: $root.IsRiskVisible($data) -->
                            <span class="fa fa-fw fa-check-square-o"></span>
                            <!-- /ko -->
                            <!-- ko ifnot: $root.IsRiskVisible($data) -->
                            <span class="fa fa-fw fa-square-o"></span>
                            <!-- /ko -->
                            <span class="fa fa-bell" style="color: green"></span>
                            <!-- ko if: $data >= 2 -->
                            <span class="fa fa-bell" style="color: blue"></span>
                            <!-- /ko-->
                            <!-- ko if: $data >= 3 -->
                            <span class="fa fa-bell" style="color: orange"></span>
                            <!-- /ko-->
                            <!-- ko if: $data >= 4 -->
                            <span class="fa fa-bell" style="color: darkorange"></span>
                            <!-- /ko-->
                            <!-- ko if: $data >= 5 -->
                            <span class="fa fa-bell" style="color: red"></span>
                            <!-- /ko-->
                            <!-- ko if: $data <= 4 -->
                            <span class="fa fa-bell-o"></span>
                            <!-- /ko-->
                            <!-- ko if: $data <= 3 -->
                            <span class="fa fa-bell-o"></span>
                            <!-- /ko-->
                            <!-- ko if: $data <= 2 -->
                            <span class="fa fa-bell-o"></span>
                            <!-- /ko-->
                            <!-- ko if: $data <= 1 -->
                            <span class="fa fa-bell-o"></span>
                            <!-- /ko-->
                        </li>
                        <!-- /ko -->
                    </ul>
                </div>
            </div>
        </div>

        <div class="app-header">
            <div class="col-md-3 app-header-space" data-bind="click: SortByName">
                <span>Application Name</span>
                <!-- ko if: SortMethod() == 'Name'-->
                <!-- ko if: SortAscending() -->
                <span class="glyphicon glyphicon-chevron-up"></span>
                <!-- /ko -->
                <!-- ko ifnot: SortAscending() -->
                <span class="glyphicon glyphicon-chevron-down"></span>
                <!-- /ko -->
                <!-- /ko-->
            </div>
            <div class="col-md-2 app-header-space" data-bind="click: SortByCategory">
                <span>Category</span>
                <!-- ko if: SortMethod() == 'Category'-->
                <!-- ko if: SortAscending() -->
                <span class="glyphicon glyphicon-chevron-up"></span>
                <!-- /ko -->
                <!-- ko ifnot: SortAscending() -->
                <span class="glyphicon glyphicon-chevron-down"></span>
                <!-- /ko -->
                <!-- /ko-->
            </div>
            <div class="col-md-2 app-header-space" data-bind="click: SortByTechnology">
                <span>Technology</span>
                <!-- ko if: SortMethod() == 'Technology'-->
                <!-- ko if: SortAscending() -->
                <span class="glyphicon glyphicon-chevron-up"></span>
                <!-- /ko -->
                <!-- ko ifnot: SortAscending() -->
                <span class="glyphicon glyphicon-chevron-down"></span>
                <!-- /ko -->
                <!-- /ko-->
            </div>
            <div class="col-md-5 app-header-space">
                <div class="col-md-3" data-bind="click: SortByPopularity">
                    <span>Popularity</span>
                    <!-- ko if: SortMethod() == 'Popularity'-->
                    <!-- ko if: SortAscending() -->
                    <span class="glyphicon glyphicon-chevron-up"></span>
                    <!-- /ko -->
                    <!-- ko ifnot: SortAscending() -->
                    <span class="glyphicon glyphicon-chevron-down"></span>
                    <!-- /ko -->
                    <!-- /ko-->
                </div>
                <div class="col-md-3" data-bind="click: SortByRisk">
                    <span>Risk</span>
                    <!-- ko if: SortMethod() == 'Risk'-->
                    <!-- ko if: SortAscending() -->
                    <span class="glyphicon glyphicon-chevron-up"></span>
                    <!-- /ko -->
                    <!-- ko ifnot: SortAscending() -->
                    <span class="glyphicon glyphicon-chevron-down"></span>
                    <!-- /ko -->
                    <!-- /ko-->
                </div>
                <div class="col-md-3">Deep App Ctrl</div>
                <div class="col-md-3" data-bind="click: SortByRelease">
                    <span>Last Released</span>
                    <!-- ko if: SortMethod() == 'Release'-->
                    <!-- ko if: SortAscending() -->
                    <span class="glyphicon glyphicon-chevron-up"></span>
                    <!-- /ko -->
                    <!-- ko ifnot: SortAscending() -->
                    <span class="glyphicon glyphicon-chevron-down"></span>
                    <!-- /ko -->
                    <!-- /ko-->
                </div>
            </div>
        </div>
    </div>
    <div class="container inner-container page-body-padding">
        <ul class="apps" data-bind="foreach: Apps">
            <li class="searchable-app" data-bind="css: { visible: IsVisible, hidden: !IsVisible() }">
                <div class="col-md-3 app-field searchable-key" data-bind="text: Name"></div>
                <div class="col-md-2 app-field" data-bind="text: Category"></div>
                <div class="col-md-2 app-field" data-bind="text: Technology"></div>
                <div class="col-md-5 app-field">
                    <div class="col-md-3 app-field">
                        <span class="glyphicon glyphicon-star" style="color: gold"></span>
                        <!-- ko if: Popularity() >= 2 -->
                        <span class="glyphicon glyphicon-star" style="color: gold"></span>
                        <!-- /ko-->
                        <!-- ko if: Popularity() >= 3 -->
                        <span class="glyphicon glyphicon-star" style="color: gold"></span>
                        <!-- /ko-->
                        <!-- ko if: Popularity() >= 4 -->
                        <span class="glyphicon glyphicon-star" style="color: gold"></span>
                        <!-- /ko-->
                        <!-- ko if: Popularity() >= 5 -->
                        <span class="glyphicon glyphicon-star" style="color: gold"></span>
                        <!-- /ko-->
                        <!-- ko if: Popularity() <= 4 -->
                        <span class="glyphicon glyphicon-star-empty"></span>
                        <!-- /ko-->
                        <!-- ko if: Popularity() <= 3 -->
                        <span class="glyphicon glyphicon-star-empty"></span>
                        <!-- /ko-->
                        <!-- ko if: Popularity() <= 2 -->
                        <span class="glyphicon glyphicon-star-empty"></span>
                        <!-- /ko-->
                        <!-- ko if: Popularity() <= 1 -->
                        <span class="glyphicon glyphicon-star-empty"></span>
                        <!-- /ko-->
                    </div>
                    <div class="col-md-3 app-field bars">
                        <span class="fa fa-bell" style="color: green"></span>
                        <!-- ko if: Risk() >= 2 -->
                        <span class="fa fa-bell" style="color: blue"></span>
                        <!-- /ko-->
                        <!-- ko if: Risk() >= 3 -->
                        <span class="fa fa-bell" style="color: orange"></span>
                        <!-- /ko-->
                        <!-- ko if: Risk() >= 4 -->
                        <span class="fa fa-bell" style="color: darkorange"></span>
                        <!-- /ko-->
                        <!-- ko if: Risk() >= 5 -->
                        <span class="fa fa-bell" style="color: red"></span>
                        <!-- /ko-->
                        <!-- ko if: Risk() <= 4 -->
                        <span class="fa fa-bell-o"></span>
                        <!-- /ko-->
                        <!-- ko if: Risk() <= 3 -->
                        <span class="fa fa-bell-o"></span>
                        <!-- /ko-->
                        <!-- ko if: Risk() <= 2 -->
                        <span class="fa fa-bell-o"></span>
                        <!-- /ko-->
                        <!-- ko if: Risk() <= 1 -->
                        <span class="fa fa-bell-o"></span>
                        <!-- /ko-->
                    </div>
                    <div class="col-md-3 app-field" data-bind="text: DeepAppCtrlDisplay"></div>
                    <div class="col-md-3 app-field" data-bind="text: ReleasedDisplay"></div>
                </div>
            </li>
        </ul>
    </div>
</div>

@section Scripts {
    <script src="~/Scripts/jquery-1.10.2.min.js"></script>
    <script src="~/Scripts/DataTables/jquery.dataTables.min.js"></script>
    <script src="~/Scripts/knockout-3.3.0.js"></script>
    <script src="~/Scripts/moment.min.js"></script>
    <script src="~/Scripts/Home/ApplicationSignature.js"></script>

    <script type="text/javascript">

        $(document).ready(function () {
            $('.dropdown.keep-open').on({
                "shown.bs.dropdown": function () { this.closable = true; },
                "click":             function () { this.closable = false; },
                "hide.bs.dropdown":  function () { return this.closable; }
            });

            $('#filter').on('keyup', function () {
                UpdateHighlighting();
            });

            $('.searchable-app').addClass("visible");
            UpdateHighlighting();
        });       

        var UpdateHighlighting = function () {
            $('.searchable-app').removeClass('alternate');
            $('.searchable-app.visible:odd').addClass('alternate');
        }

        // Here's my data model
        var ViewModel = function (model) {
            var self = this;

            self.Filter = ko.observable('');

            // Categories 
            self.AllCategories = ["Botnet", "Business", "Cloud.IT", "Collaboration", "Email", "Game", "General.Interest", "Industrial", "Mobile", "Network.Service", "P2P", "Proxy", "Remote.Access", "Social.Media", "Storage.Backup", "Update", "Video/Audio", "VoIP", "Web.Others"]
            self.VisibleCategories = ko.observableArray($.extend(true, [], self.AllCategories));

            self.IsCategoryVisible = function (category) {
                return self.VisibleCategories().indexOf(category) >= 0;
            }

            self.SelectAllCategories = function () {
                self.VisibleCategories($.extend(true, [], self.AllCategories));
                UpdateHighlighting();
            }

            self.UnselectAllCategories = function () {
                self.VisibleCategories([]);
                UpdateHighlighting();
            }

            self.ToggleCategory = function (category) {
                if (self.IsCategoryVisible(category))
                    self.VisibleCategories.remove(category);
                else
                    self.VisibleCategories.push(category);
                UpdateHighlighting();
            }

            // Technology
            self.AllTechnologies = ["Browser-Based", "Client-Server", "Network-Protocol", "Peer-to-Peer"]
            self.VisibleTechnologies = ko.observableArray($.extend(true, [], self.AllTechnologies));

            self.IsTechnologyVisible = function (technology) {
                return self.VisibleTechnologies().indexOf(technology) >= 0;
            }

            self.SelectAllTechnologies = function () {
                self.VisibleTechnologies($.extend(true, [], self.AllTechnologies));
                UpdateHighlighting();
            }

            self.UnselectAllTechnologies = function () {
                self.VisibleTechnologies([]);
                UpdateHighlighting();
            }

            self.ToggleTechnology = function (technology) {
                if (self.IsTechnologyVisible(technology))
                    self.VisibleTechnologies.remove(technology);
                else
                    self.VisibleTechnologies.push(technology);
                UpdateHighlighting();
            }

            // Popularity
            self.AllPopularities = [5, 4, 3, 2, 1]
            self.VisiblePopularities = ko.observableArray($.extend(true, [], self.AllPopularities));
            
            self.IsPopularityVisible = function (popularity) {
                return self.VisiblePopularities().indexOf(popularity) >= 0;
            }

            self.SelectAllPopularities = function () {
                self.VisiblePopularities($.extend(true, [], self.AllPopularities));
                UpdateHighlighting();
            }

            self.UnselectAllPopularities = function () {
                self.VisiblePopularities([]);
                UpdateHighlighting();
            }

            self.TogglePopularity = function (popularity) {
                if (self.IsPopularityVisible(popularity))
                    self.VisiblePopularities.remove(popularity);
                else
                    self.VisiblePopularities.push(popularity);
                UpdateHighlighting();
            }

            // Risk
            self.AllRisks = [5, 4, 3, 2, 1]
            self.VisibleRisks = ko.observableArray($.extend(true, [], self.AllRisks));

            self.IsRiskVisible = function (risk) {
                return self.VisibleRisks().indexOf(risk) >= 0;
            }

            self.SelectAllRisks = function () {
                self.VisibleRisks($.extend(true, [], self.AllRisks));
                UpdateHighlighting();
            }

            self.UnselectAllRisks = function () {
                self.VisibleRisks([]);
                UpdateHighlighting();
            }

            self.ToggleRisk = function (risk) {
                if (self.IsRiskVisible(risk))
                    self.VisibleRisks.remove(risk);
                else
                    self.VisibleRisks.push(risk);
                UpdateHighlighting();
            }

            // Sorting
            self.SortMethod = ko.observable('');
            self.SortAscending = ko.observable(true);

            self.SortByName = function () {
                // currently not sorting by name, so we sort ascending
                if (self.SortMethod() != 'Name') {
                    self.Apps.sort(function (left, right) {
                        if (left.Name() == right.Name())
                            return 0;
                        else if (left.Name() < right.Name())
                            return -1;
                        else
                            return 1;
                    });
                    self.SortAscending(true);
                }
                // currently already sorting by name
                else {
                    // currently sorted ascending, we then sort it descending
                    if (self.SortAscending()) {
                        self.Apps.sort(function (left, right) {
                            if (left.Name() == right.Name())
                                return 0;
                            else if (left.Name() < right.Name())
                                return 1;
                            else
                                return -1;
                        });
                        self.SortAscending(false);
                    }
                    // currently sorted descending, we then sort it ascending
                    else {
                        self.Apps.sort(function (left, right) {
                            if (left.Name() == right.Name())
                                return 0;
                            else if (left.Name() < right.Name())
                                return -1;
                            else
                                return 1;
                        });
                        self.SortAscending(true);
                    }
                }
                self.SortMethod('Name');
                UpdateHighlighting();
            }

            self.SortByCategory = function () {
                // currently not sorting by name, so we sort ascending
                if (self.SortMethod() != 'Category') {
                    self.Apps.sort(function (left, right) {
                        if (left.Category() == right.Category())
                            return 0;
                        else if (left.Category() < right.Category())
                            return -1;
                        else
                            return 1;
                    });
                    self.SortAscending(true);
                }
                    // currently already sorting by name
                else {
                    // currently sorted ascending, we then sort it descending
                    if (self.SortAscending()) {
                        self.Apps.sort(function (left, right) {
                            if (left.Category() == right.Category())
                                return 0;
                            else if (left.Category() < right.Category())
                                return 1;
                            else
                                return -1;
                        });
                        self.SortAscending(false);
                    }
                        // currently sorted descending, we then sort it ascending
                    else {
                        self.Apps.sort(function (left, right) {
                            if (left.Category() == right.Category())
                                return 0;
                            else if (left.Category() < right.Category())
                                return -1;
                            else
                                return 1;
                        });
                        self.SortAscending(true);
                    }
                }
                self.SortMethod('Category');
                UpdateHighlighting();
            }

            self.SortByTechnology = function () {
                // currently not sorting by name, so we sort ascending
                if (self.SortMethod() != 'Technology') {
                    self.Apps.sort(function (left, right) {
                        if (left.Technology()[0] == right.Technology()[0])
                            return 0;
                        else if (left.Technology()[0] < right.Technology()[0])
                            return -1;
                        else
                            return 1;
                    });
                    self.SortAscending(true);
                }
                    // currently already sorting by name
                else {
                    // currently sorted ascending, we then sort it descending
                    if (self.SortAscending()) {
                        self.Apps.sort(function (left, right) {
                            if (left.Technology()[0] == right.Technology()[0])
                                return 0;
                            else if (left.Technology()[0] < right.Technology()[0])
                                return 1;
                            else
                                return -1;
                        });
                        self.SortAscending(false);
                    }
                        // currently sorted descending, we then sort it ascending
                    else {
                        self.Apps.sort(function (left, right) {
                            if (left.Technology()[0] == right.Technology()[0])
                                return 0;
                            else if (left.Technology()[0] < right.Technology()[0])
                                return -1;
                            else
                                return 1;
                        });
                        self.SortAscending(true);
                    }
                }
                self.SortMethod('Technology');
                UpdateHighlighting();
            }

            self.SortByPopularity = function () {
                // currently not sorting by name, so we sort ascending
                if (self.SortMethod() != 'Popularity') {
                    self.Apps.sort(function (left, right) {
                        if (left.Popularity() == right.Popularity())
                            return 0;
                        else if (left.Popularity() < right.Popularity())
                            return -1;
                        else
                            return 1;
                    });
                    self.SortAscending(true);
                }
                    // currently already sorting by name
                else {
                    // currently sorted ascending, we then sort it descending
                    if (self.SortAscending()) {
                        self.Apps.sort(function (left, right) {
                            if (left.Popularity() == right.Popularity())
                                return 0;
                            else if (left.Popularity() < right.Popularity())
                                return 1;
                            else
                                return -1;
                        });
                        self.SortAscending(false);
                    }
                        // currently sorted descending, we then sort it ascending
                    else {
                        self.Apps.sort(function (left, right) {
                            if (left.Popularity() == right.Popularity())
                                return 0;
                            else if (left.Popularity() < right.Popularity())
                                return -1;
                            else
                                return 1;
                        });
                        self.SortAscending(true);
                    }
                }
                self.SortMethod('Popularity');
                UpdateHighlighting();
            }
            
            self.SortByRisk = function () {
                // currently not sorting by name, so we sort ascending
                if (self.SortMethod() != 'Risk') {
                    self.Apps.sort(function (left, right) {
                        if (left.Risk() == right.Risk())
                            return 0;
                        else if (left.Risk() < right.Risk())
                            return -1;
                        else
                            return 1;
                    });
                    self.SortAscending(true);
                }
                    // currently already sorting by name
                else {
                    // currently sorted ascending, we then sort it descending
                    if (self.SortAscending()) {
                        self.Apps.sort(function (left, right) {
                            if (left.Risk() == right.Risk())
                                return 0;
                            else if (left.Risk() < right.Risk())
                                return 1;
                            else
                                return -1;
                        });
                        self.SortAscending(false);
                    }
                        // currently sorted descending, we then sort it ascending
                    else {
                        self.Apps.sort(function (left, right) {
                            if (left.Risk() == right.Risk())
                                return 0;
                            else if (left.Risk() < right.Risk())
                                return -1;
                            else
                                return 1;
                        });
                        self.SortAscending(true);
                    }
                }
                self.SortMethod('Risk');
                UpdateHighlighting();
            }

            self.SortByRelease = function () {
                // currently not sorting by name, so we sort ascending
                if (self.SortMethod() != 'Release') {
                    self.Apps.sort(function (left, right) {
                        if (left.ReleasedDisplay() == right.ReleasedDisplay())
                            return 0;
                        else if (left.ReleasedDisplay() < right.ReleasedDisplay())
                            return -1;
                        else
                            return 1;
                    });
                    self.SortAscending(true);
                }
                    // currently already sorting by name
                else {
                    // currently sorted ascending, we then sort it descending
                    if (self.SortAscending()) {
                        self.Apps.sort(function (left, right) {
                            if (left.ReleasedDisplay() == right.ReleasedDisplay())
                                return 0;
                            else if (left.ReleasedDisplay() < right.ReleasedDisplay())
                                return 1;
                            else
                                return -1;
                        });
                        self.SortAscending(false);
                    }
                        // currently sorted descending, we then sort it ascending
                    else {
                        self.Apps.sort(function (left, right) {
                            if (left.ReleasedDisplay() == right.ReleasedDisplay())
                                return 0;
                            else if (left.ReleasedDisplay() < right.ReleasedDisplay())
                                return -1;
                            else
                                return 1;
                        });
                        self.SortAscending(true);
                    }
                }
                self.SortMethod('Release');
                UpdateHighlighting();
            }

            // Data
            self.Apps = ko.observableArray();
            model.forEach(function (appSig) {
                self.Apps.push(new ApplicationSignature(appSig, self));
            });

            // Init
            self.SortByName();
        };

        function EncodeModel() {
            return @(Html.Raw(Json.Encode(ViewBag.Model)))
        }

        var model = EncodeModel();

        var view = new ViewModel(model);
        ko.applyBindings(view);
    </script>
}

